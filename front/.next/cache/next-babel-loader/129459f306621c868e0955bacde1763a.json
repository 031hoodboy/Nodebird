{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRARE } from 'next-redux-wrapper';\n\nconst {\n  default: Password\n} = require(\"antd/lib/input/Password\");\n\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = data => {\n  return {\n    type: 'LOG_OUT'\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Applications/mampstack-7.4.8-0/apache2/htdocs/nodebird/front/reducers/index.js"],"names":["HYDRARE","default","Password","require","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;;AAEA,MAAM;AAAEC,EAAAA,OAAO,EAAEC;AAAX,IAAwBC,OAAO,CAAC,yBAAD,CAArC;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AAPW,CAArB;AAYA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAIF,IAAD,IAAU;AAClC,SAAO;AACHC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM;;AAOP,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAwBa,MAAxB,KAAmC;AACnD,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAK,QAAL;AACI,6CACOG,KADP;AAEIX,QAAAA,IAAI,kCACDW,KAAK,CAACX,IADL;AAEJC,UAAAA,UAAU,EAAE,IAFR;AAGJD,UAAAA,IAAI,EAAEY,MAAM,CAACL;AAHT;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOI,KADP;AAEIX,QAAAA,IAAI,kCACDW,KAAK,CAACX,IADL;AAEJC,UAAAA,UAAU,EAAE,KAFR;AAGJD,UAAAA,IAAI,EAAE;AAHF;AAFR;;AAQJ;AACI,aAAOW,KAAP;AApBR;AAsBH,CAvBD;;AAyBA,eAAeD,WAAf","sourcesContent":["import {HYDRARE} from 'next-redux-wrapper';\n\nconst { default: Password } = require(\"antd/lib/input/Password\")\n\nconst initialState = {\n    user: {\n        isLoggedIn: false,\n        user: null,\n        signUpData: {},\n        loginData: {},\n    },\n    post: {\n        mainPosts: [],\n    }\n}\n\nexport const loginAction = (data) => {\n    return {\n        type: 'LOG_IN', \n        data,\n    }\n}\n\nexport const logoutAction = (data) => {\n    return {\n        type: 'LOG_OUT',\n    }\n}\n\n\nconst rootReducer = (state = initialState , action) => {\n    switch (action.type){\n        case 'LOG_IN':\n            return {\n                ...state,\n                user: {\n                ...state.user,\n                isLoggedIn: true,\n                user: action.data,\n            },\n            };\n        case 'LOG_OUT':\n            return {\n                ...state,\n                user: {\n                ...state.user,\n                isLoggedIn: false,\n                user: null,\n            },\n        };\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}