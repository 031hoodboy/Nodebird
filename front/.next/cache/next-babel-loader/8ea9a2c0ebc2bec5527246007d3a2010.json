{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst {\n  default: Password\n} = require(\"antd/lib/input/Password\");\n\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\n\nconst login = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state.user), {}, {\n        isLoggedIn: true\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Applications/mampstack-7.4.8-0/apache2/htdocs/nodebird/front/reducers/index.js"],"names":["default","Password","require","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","login","data","type","rootReducer","state","action"],"mappings":";;;;;;AAAA,MAAM;AAAEA,EAAAA,OAAO,EAAEC;AAAX,IAAwBC,OAAO,CAAC,yBAAD,CAArC;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AAPW,CAArB;;AAYA,MAAMC,KAAK,GAAIC,IAAD,IAAU;AACpB,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD;;AAQA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAwBY,MAAxB,KAAmC;AACnD,UAAQA,MAAM,CAACH,IAAf;AACI,SAAK,QAAL;AACI,6CACOE,KAAK,CAACV,IADb;AAEIC,QAAAA,UAAU,EAAE;AAFhB;AAFR;AAOH,CARD;;AAUA,eAAeQ,WAAf","sourcesContent":["const { default: Password } = require(\"antd/lib/input/Password\")\n\nconst initialState = {\n    user: {\n        isLoggedIn: false,\n        user: null,\n        signUpData: {},\n        loginData: {},\n    },\n    post: {\n        mainPosts: [],\n    }\n}\n\nconst login = (data) => {\n    return {\n        type: 'LOG_IN',\n        data,\n    }\n}\n\n\nconst rootReducer = (state = initialState , action) => {\n    switch (action.type){\n        case 'LOG_IN':\n            return {\n                ...state.user,\n                isLoggedIn: true,\n            }\n    }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}